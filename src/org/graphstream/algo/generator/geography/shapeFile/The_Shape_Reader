Vocabulaire :
	* Feature :
		- Un objet vectoriel du shape-file : un point, une polyligne, un polygone associé à des
		  attributs.
	* Point (Vertex) :
		- Une position planaire (x,y) dans l'espace géodésique WGS84.
	* Polyligne (Polyline) :
		- Une série de n points ordonnés, reliés par n-1 segments de droite.
	* Polygone (Polygon) :
		- Une série de n points ordonnés, reliés par n segments de droite, le dernier segment se
		  traçant du point n au point 1.
	* Attribut :
		- Une association (nom,valeur). Chaque feature contient une table de telles associations.
	* Points-Etrêmité :
		- Les points d'une polyligne 

Le principe :
	* On va passer des données topographiques (géodésiques) à un format topologique : le graphe.
		- Le format topographique contient les ensembles de features qui peuvent se superposer, se
		  croiser, etc. mais ne contiennent aucune information sur la façon dont elles sont reliées
		  entre elles : il n'y a aucun codage explicite des relation entre les features.
		  Les géographes désignent souvent le fait d'établir des relations entre les features « la
		  topologie », quelles que soient ces relations.
		- Or, on désire créer un réseau routier sous forme de graphe, on désire donc mettre en
		  relation les extrêmités de features « routes » entre elles.
		- Une route peut être constituée de très nombreuses features.
		- On sait que l'on aura qu'à considérer les extrêmités car les intersections ne peuvent se
		  faire qu'à ces extrêmités.
		- Cependant le format shape-file nous crée une complication supplémentaire : il est
		  totalement planaire, et les features ne peuvent se couper que si un point est créé entre
		  les deux : si deux features font intersection, il y aura un point dans la polyligne ou le
		  polygone des deux features aux points d'intersection.
		- Ceci n'est usuellement pas un problème si les points d'intersection ne sont pas des extrêmités
		  de polyligne. Mais il arrive que les polylignes aient des extrités sur des points
		  d'intersection : ceci ne signifie malheureusement pas que les deux routes forment une
		  intersection : il peut y avoir un pont ou un tunnel à cet endroit.
		- On peut résoudre le problème avec les données Z. En effet, bien que le shape-file stocke
		  des coordonées en (x,y,z), la valeur z n'est en pratique jamais donnée (les coordonées
		  géodésiques sont habituellement en 2 dimensions). Cependant certaines couches supplémentaires
		  du shape file peuvent donner les valeurs Z pour des points.
		- Le problème est d'associer/fusionner ces points Z avec les points des routes.
		- On peut faire cela s'il existe (et ce doit être le cas) des attributs « liants ».  
	
	* On peut avoir à lire plusieurs shape files que l'on va fusionner (par exemple pour lire le Z).
	
	* La fusion doit pouvoir se faire en fonction d'attributs des features : deux points sont
	  fusionnés si leur attribut XX à la même valeur par exemple.

	* Le lecteur par défaut reprend l'interface GeneratorExtended, ceci lui permet d'avoir
	  accès au graphe.
	
	* Le générateur lis un ou plusieurs fichier shape, séquentiellement.

	* Il existe un index spatial (un quadtree, puisque les shapes sont forcément planaires) qui
	  référence chaque point.
	  	+ Cet index ne fait qu'une chose : donner la liste des points qui se trouvent à une
	  	  position donnée.
	
	* Lors de la lecture on procède chaque feature une par une.
		+ si la feature est un point :
			- On crée le point correspondant avec tous ses attributs dans l'index spatial.
			- Ces points ne deviennent jamais des noeuds du graphe car seules les polylignes (qui
			  représentent les routes nous intéressent).
			- Cependant ils peuvent être intéressants car il contiennent des attributs qui seront
			  fusionnés au points des polylignes quand elles seront lues.
		
		+ si la feature est une polyligne (route) :
			- Les polylignes forment des routes, on va donc générer les noeuds et arcs/arrêtes du
			  graphe à cette étape.
			- On regarde uniquement les points extrêmes de la polyligne.
			- Pour ces points on fait les fusions dans l'ordre indiqué :
				- fusion avec les points existants ayant le même LINK_ID.
					- normalement on pioche le point dans dans l'index spatial et il n'y en a qu'un
					  qui correspond. 
					  -> La fusion correspond à l'ajout des attributs supplémentaires.
				- fusion avec les points existants ayant le même Z-index.
					- Ici plusieurs points peuvent correspondre, si c'est le cas il faut retirer les
					  points supplémentaires.
	
		-> La fusion se produit lorsque l'on se prépare à ajouter un point.
			- La première opération est de vérifier qu'un point à cette position géodésique
			  n'existe pas déjà.
			  	- S'il n'éxiste qu'un autre point à cette position, on peut utiliser directement ce
			  	  point et seulement lui ajouter les attributs du nouveau point.
			  	- S'il éxiste plusieurs autres points, il va falloir en garder un seul (et vérifier
			  	  que personne d'autre n'utilise ce point!!).
			  
		-> Pour les fusions on peut créer des objets "MergeOperation" qui spécifie ce qu'il faut faire
		   avec l'ensemble des points qui se recoupent.
		    - Rien !
		   	- Fusion simple (par défaut).
		   	- Fusion si un attribut donné à la même valeur sur les différents points.			
		   	
		   	
	* Voici comment pourrait se passer la fusion pour les données NavTeq sur trois segments de routes
	  qui font intersection à l'une de leurs extrêmités :
	  	- Les segments que l'on considère sonts : AB AC et AD
	  	- Ils se rejoignent tous en A.
	  	- Chaque segment à sa propre version du point A (Aab, Aac, Aad).
	  	- Idéalement le graphe que nous désirons générer possède trois segments/arcs aussi mais
	  	  seulement quatre points/noeuds.
	  	
	  		B ---- A ---- C
	  		       |
	  		       |
	  		       D
	  	
	  	- On lit d'abord la couche "Z-level" qui introduit six points (pour les deux extrêmités de
	  	  chaque segment de route) :
	  	  	Aab_Z	{ z-index=0;  link-id=AB; }
	  	  	Aac_Z	{ z-index=0;  link-id=AC; }
	  	  	Aad_Z	{ z-index=0;  link-id=AD; }
	  	  	B_Z		{ z-index=0;  link-id=AB; }
	  	  	C_Z		{ z-index=0;  link-id=AC; }
	  	  	D_Z		{ z-index=0;  link-id=AD; }
		- On lit ensuite les segments qui introduisent six nouveaux points.
			Aab		{ link-id=AB; }
			Aac		{ link-id=AC; }
			Aad		{ link-id=AD; }
			B		{ link-id=AB; }
			C		{ link-id=AC; }
			D		{ link-id=AD; }
		- Durant ce processus de lecture, on utilise des opérations de fusions, si les points sont
		  aux mêmes coordonées :
			1. Fusion si même "LINK_ID", on garde le nouveau point et on lui fusione l'ancien que
			   l'on peut détruire car chaque point Z ne correspond qu'à un autre point).
			2. Fusion si même "Z_LEVEL" : on garde l'ancien point, on lui ajoute l'ensemble d'attributs
			   du nouveau point.
		- Cela donne, dans l'ordre de lecture arbitraire des features (AB -> AC -> AD) :
			- On lit le point Aab
				Fusion avec le point Aab_Z (même pos et link-id)
				Destruction de Aab_Z
				-> Aab { z-index=0; link-id=AB; }
			- On lit le point B
				Fusion avec B_Z (même pos et link-id)
				Destruction de B_Z
				-> B { z-index=0; link-id=AB; }
			- On lit le point Aac
				Fusion avec le point Aac_Z (même pos et link-id)
				Destruction de Aac_Z
				-> Aac { z-index=0; link-id=AC; }
				Fusion avec Aab (même pos et z-index)
				Destruction de Aac
				-> Aab { z-index=0; link-id=AC; link-id=AB; }
			- On lit le point C
				Fusion avec C_Z (même pos et link-id)
				Destruction de C_Z
				-> C { z-index=0; link-id=AC; }
			- On lit le point Aad
				Fusion avec Aad_Z (même pos et link-id)
				Destruction de Aad_Z
				-> Aad { z-index=0; link-id=AD; }
				Fusion avec Aab (même pos et z-index)
				Destruction de Aad
				-> Aab { z-index=0; link-id=AD; link-id=AC; link-id=AB; }
			- On lit le point D
				Fusion avec D_Z (même pos et link-id)
				Destruction de D_Z
				-> D { z-index=0; link-id=AD };
				
		- Résultat :
			
			B ---- Aab ---- C
			        |
			        |
			        D
			        
		  On a bien quatre noeuds (Aab, B, C, et D), ils ont tous les attributs z-index et A contient
		  trois attrbuts (link-id) sur les trois routes qui y mênent.
		  
		- Le processus est séquentiel on peut donc créer le graphe à la volée, excepté l'index
		  spatial qui grossit avec le temps.